package main

import (
	"bytes"
	"crypto/sha256"
	"encoding/gob"
	"encoding/hex"
	"fmt"
	"os"
)

// reward
const subsidy = 10

// TXInput struct has the ID of previous transaction
type TXInput struct {
	TXid   []byte
	Vout   int
	Sign   []byte
	PubKey []byte
}

// TXOutput the output(coins) of a TX
type TXOutput struct {
	Value      int
	PubKeyHash []byte
}

// Transaction for storing txid, tx input and output
type Transaction struct {
	TXid []byte
	Vin  []TXInput
	Vout []TXOutput
}

// SetID sets the TXID based on hash of its contents
func (tx *Transaction) SetID() {
	var encoded bytes.Buffer
	var hash [32]byte
	encoder := gob.NewEncoder(&encoded)
	encoder.Encode(tx)
	hash = sha256.Sum256(encoded.Bytes())
	tx.TXid = hash[:]
}

// NewCoionbaseTX creates a coinbase tx and returns it
// it can only be generated by a *miner*
func NewCoionbaseTX(to []byte, data string) *Transaction {
	if data == "" {
		data = "reward to " + string(to)
	}
	txin := TXInput{[]byte{}, -1, nil, []byte(data)}
	txout := TXOutput{subsidy, to}
	tx := Transaction{nil, []TXInput{txin}, []TXOutput{txout}}
	tx.SetID()
	return &tx
}

// CanUnlockOutputWith check
// func (in *TXInput) CanUnlockOutputWith(unlockData string) bool {
// 	if in.Sign == unlockData {
// 		return true
// 	}
// 	return false
// }

// UsesKey func
func (in *TXInput) UsesKey(publickeyhash []byte) bool {
	inpHash := HashPubKey(in.PubKey)
	if bytes.Compare(inpHash, publickeyhash) == 0 {
		return true
	}
	return false
}

// CanbeUnlockedWith check
// func (out *TXOutput) CanbeUnlockedWith(unlockData string) bool {
// 	if out.PubKeyHash == unlockData {
// 		return true
// 	}
// 	return false
// }

// Lock func
func (out *TXOutput) Lock(address []byte) {
	pubkeyhash := Base58Decode(address)
	pubkeyhash = pubkeyhash[1 : len(pubkeyhash)-4]
	out.PubKeyHash = pubkeyhash
	return
}

// IsLockedWith func
func (out *TXOutput) IsLockedWith(pubkeyhash []byte) bool {
	temp := bytes.Compare(out.PubKeyHash, pubkeyhash)
	if temp == 0 {
		return true
	}
	return false
}

// IsCoinBaseTX check if TX is coinbase
func (tx Transaction) IsCoinBaseTX() bool {
	if len(tx.Vin) == 1 && len(tx.Vin[0].TXid) == 0 && tx.Vin[0].Vout == -1 {
		return true
	}
	return false
}

// NewUTXOTransaction creates a new tx from one peer to another
func NewUTXOTransaction(from []byte, to []byte, amount int, bc *BlockChain) *Transaction {
	var inputs []TXInput
	var outputs []TXOutput
	accumulated, spendableOutputs := bc.FindSpendableOutputs(from, amount)
	if accumulated < amount {
		fmt.Println("Not enough coins for address: ", from, "coins: ", accumulated)
		os.Exit(2)
	}
	for txid, out := range spendableOutputs {
		TXid, _ := hex.DecodeString(txid)
		for _, out := range out {
			input := TXInput{TXid, out, from}
			inputs = append(inputs, input)
		}
	}
	outputs = append(outputs, TXOutput{amount, to})
	if accumulated > amount {
		outputs = append(outputs, TXOutput{accumulated - amount, from})
	}

	tx := Transaction{nil, inputs, outputs}
	return &tx
}
