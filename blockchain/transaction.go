package main

import (
	"bytes"
	"crypto/sha256"
	"encoding/gob"
)

// reward
const subsidy = 10

// TXInput struct has the ID of previous transaction
type TXInput struct {
	TXid []byte
	Vout int
	Sign string
}

// TXOutput the output(coins) of a TX
type TXOutput struct {
	Value  int
	PubKey string
}

// Transaction for storing txid, tx input and output
type Transaction struct {
	TXid []byte
	Vin  []TXInput
	Vout []TXOutput
}

// SetID sets the TXID based on hash of its contents
func (tx *Transaction) SetID() {
	var encoded bytes.Buffer
	var hash [32]byte
	encoder := gob.NewEncoder(&encoded)
	encoder.Encode(tx)
	hash = sha256.Sum256(encoded.Bytes())
	tx.TXid = hash[:]
}

// NewCoionbaseTX creates a coinbase tx and returns it
// it can only be generated by a *miner*
func NewCoionbaseTX(to string, data string) *Transaction {
	if data == "" {
		data = "reward to " + to
	}
	txin := TXInput{[]byte{}, -1, data}
	txout := TXOutput{subsidy, to}
	tx := Transaction{nil, []TXInput{txin}, []TXOutput{txout}}
	tx.SetID()
	return &tx
}

// CanUnlockOutputWith check
func (in *TXInput) CanUnlockOutputWith(unlockData string) bool {
	if in.Sign == unlockData {
		return true
	}
	return false
}

// CanbeUnlockedWith check
func (out *TXOutput) CanbeUnlockedWith(unlockData string) bool {
	if out.PubKey == unlockData {
		return true
	}
	return false
}

// IsCoinBaseTX check if TX is coinbase
func (tx Transaction) IsCoinBaseTX() bool {
	if len(tx.Vin) == 1 && len(tx.Vin[0].TXid) == 0 && tx.Vin[0].Vout == -1 {
		return true
	}
	return false
}
